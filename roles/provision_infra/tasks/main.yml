---
- name: Preparar VPC e sub-redes quando create_vpc=true
  when: create_vpc | bool
  block:
    - name: Criar VPC do projeto
      amazon.aws.ec2_vpc_net:
        name: "{{ project_name }}-vpc"
        cidr_block: "{{ vpc_cidr_block }}"
        dns_support: true
        dns_hostnames: true
        state: present
        tags: "{{ common_tags | combine({'Component': 'network'}) }}"
      register: created_vpc

    - name: Registrar VPC criada
      ansible.builtin.set_fact:
        resolved_vpc_id: "{{ created_vpc.vpc.id }}"

    - name: Criar Internet Gateway da VPC
      amazon.aws.ec2_vpc_igw:
        state: present
        vpc_id: "{{ resolved_vpc_id }}"
        tags: "{{ common_tags | combine({'Component': 'igw'}) }}"
      register: created_igw

    - name: Criar route table pública com rota default
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ resolved_vpc_id }}"
        tags: "{{ common_tags | combine({'Component': 'public-rt'}) }}"
        state: present
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ created_igw.gateway_id }}"
      register: public_route_table

    - name: Criar sub-redes públicas
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ resolved_vpc_id }}"
        cidr: "{{ item.cidr }}"
        az: "{{ item.az }}"
        map_public: true
        state: present
        tags: "{{ common_tags | combine({'Component': 'public-subnet', 'Name': item.name | default(item.cidr)}) }}"
      loop: "{{ public_subnets_config }}"
      register: created_public_subnets

    - name: Associar sub-redes públicas ao route table
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ public_route_table.route_table.id }}"
        lookup: id
        vpc_id: "{{ resolved_vpc_id }}"
        state: present
        purge_routes: false
        subnets: "{{ created_public_subnets.results | map(attribute='subnet.id') | list }}"

    - name: Criar sub-redes privadas
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ resolved_vpc_id }}"
        cidr: "{{ item.cidr }}"
        az: "{{ item.az }}"
        map_public: false
        state: present
        tags: "{{ common_tags | combine({'Component': 'private-subnet', 'Name': item.name | default(item.cidr)}) }}"
      loop: "{{ private_subnets_config }}"
      register: created_private_subnets

    - name: Definir sub-redes resolvidas a partir da criação
      ansible.builtin.set_fact:
        resolved_public_subnets: "{{ created_public_subnets.results | map(attribute='subnet.id') | list }}"
        resolved_private_subnets: "{{ created_private_subnets.results | map(attribute='subnet.id') | list }}"

- name: Preparar VPC e sub-redes quando reaproveitando infraestrutura
  when: not create_vpc | bool
  block:
    - name: Descobrir VPC padrão quando nenhuma foi informada
      amazon.aws.ec2_vpc_net_info:
        filters:
          isDefault: true
      register: default_vpc_info
      when: not vpc_id

    - name: Definir VPC a ser utilizada
      ansible.builtin.set_fact:
        resolved_vpc_id: "{{ vpc_id | default(default_vpc_info.vpcs[0].id) }}"

    - name: Obter sub-redes do VPC selecionado quando não informadas
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ resolved_vpc_id }}"
      register: resolved_vpc_subnets
      when: public_subnet_ids | length == 0 or private_subnet_ids | length == 0

    - name: Definir sub-redes públicas
      ansible.builtin.set_fact:
        resolved_public_subnets: >-
          {{ (public_subnet_ids | length > 0)
              | ternary(public_subnet_ids,
                        (resolved_vpc_subnets.subnets | default([])
                         | selectattr('map_public_ip_on_launch', 'defined')
                         | selectattr('map_public_ip_on_launch')
                         | map(attribute='id') | list)) }}

    - name: Definir sub-redes privadas (usa todas as demais quando nenhuma for informada)
      ansible.builtin.set_fact:
        resolved_private_subnets: >-
          {{ (private_subnet_ids | length > 0)
              | ternary(private_subnet_ids,
                        (resolved_vpc_subnets.subnets | default([])
                         | rejectattr('id', 'in', resolved_public_subnets | default([]))
                         | map(attribute='id') | list)) }}

- name: Validar se há sub-redes públicas e privadas disponíveis
  ansible.builtin.assert:
    that:
      - resolved_public_subnets | length > 0
      - resolved_private_subnets | length > 0
    fail_msg: "Nenhuma subnet pública ou privada disponível. Ajuste variáveis em group_vars/all.yml."

- name: Criar security group para o servidor web (porta 80 liberada)
  amazon.aws.ec2_security_group:
    name: "{{ project_name }}-web-sg"
    description: Permite HTTP/HTTPS para o servidor web
    vpc_id: "{{ resolved_vpc_id }}"
    tags: "{{ common_tags | combine({'Role': 'web'}) }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ ssh_ingress_cidr }}"
    rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
    state: present
  register: web_sg

- name: Criar security group para o banco de dados
  amazon.aws.ec2_security_group:
    name: "{{ project_name }}-db-sg"
    description: Permite acesso MySQL proveniente das instancias web
    vpc_id: "{{ resolved_vpc_id }}"
    tags: "{{ common_tags | combine({'Role': 'database'}) }}"
    rules:
      - proto: tcp
        from_port: 3306
        to_port: 3306
        group_id: "{{ web_sg.group_id }}"
    rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
    state: present
  register: db_sg

- name: Criar/atualizar o par de chaves (caso chave pública seja fornecida)
  amazon.aws.ec2_key:
    name: "{{ ec2_key_name }}"
    key_material: "{{ lookup('ansible.builtin.file', ec2_public_key_path) }}"
    state: present
  when: (ec2_public_key_path | default('', true)) | length > 0
  register: provided_key

- name: Criar par de chaves automaticamente quando nenhuma chave pública for informada
  amazon.aws.ec2_key:
    name: "{{ ec2_key_name }}"
    state: present
  register: generated_key
  when: (ec2_public_key_path | default('', true)) | length == 0

- name: Armazenar chave privada gerada
  ansible.builtin.copy:
    dest: "{{ playbook_dir }}/../artifacts/{{ ec2_key_name }}.pem"
    content: "{{ generated_key.key.private_key }}"
    mode: "0600"
  delegate_to: localhost
  run_once: true
  when:
    - generated_key is defined
    - generated_key.key is defined
    - generated_key.key.private_key is defined

- name: Provisionar instância EC2 para o servidor web
  amazon.aws.ec2_instance:
    name: "{{ project_name }}-web-{{ deployment_environment }}"
    key_name: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ec2_ami_id }}"
    subnet_id: "{{ resolved_public_subnets[0] }}"
    security_groups:
      - "{{ web_sg.group_id }}"
    volumes:
      - device_name: /dev/xvda
        ebs:
          volume_size: "{{ ec2_root_volume_size }}"
          delete_on_termination: true
    tags: "{{ common_tags | combine({'Role': 'web'}) }}"
    wait: true
  register: web_instance

- name: Aguardar SSH ficar disponível
  ansible.builtin.wait_for:
    host: "{{ web_instance.instances[0].public_ip_address | default(web_instance.instances[0].private_ip_address) }}"
    port: 22
    state: started
    delay: 5
    sleep: 5
    timeout: 180
  when: web_instance.instances | length > 0

- name: Adicionar instância web ao inventário em tempo de execução
  ansible.builtin.add_host:
    name: "{{ web_instance.instances[0].public_dns_name | default(web_instance.instances[0].private_ip_address) }}"
    groups: webservers
    ansible_host: "{{ web_instance.instances[0].public_ip_address | default(web_instance.instances[0].private_ip_address) }}"
    ansible_user: ec2-user
    ansible_python_interpreter: /usr/bin/python3
    ansible_pkg_mgr: yum
    private_ip: "{{ web_instance.instances[0].private_ip_address }}"
    instance_id: "{{ web_instance.instances[0].instance_id }}"
  when: web_instance.instances | length > 0

- name: Persistir inventário das instâncias web provisionadas
  ansible.builtin.copy:
    dest: "{{ playbook_dir }}/../artifacts/provisioned_inventory.yml"
    content: |
      all:
        children:
          tag_Role_web:
            hosts:
              {{ web_instance.instances[0].public_dns_name | default(web_instance.instances[0].private_ip_address) }}:
                ansible_user: ec2-user
                ansible_host: "{{ web_instance.instances[0].public_ip_address | default(web_instance.instances[0].private_ip_address) }}"
                private_ip: "{{ web_instance.instances[0].private_ip_address }}"
                instance_id: "{{ web_instance.instances[0].instance_id }}"
                ansible_python_interpreter: /usr/bin/python3
                ansible_pkg_mgr: yum
  delegate_to: localhost
  run_once: true
  when: web_instance.instances | length > 0

- name: Criar/atualizar grupo de sub-redes para o RDS
  amazon.aws.rds_subnet_group:
    state: present
    name: "{{ project_name }}-rds-subnets"
    description: Subnets utilizadas pelo RDS
    subnets: "{{ resolved_private_subnets }}"
    tags: "{{ common_tags | combine({'Role': 'database'}) }}"

- name: Provisionar instância RDS MySQL
  amazon.aws.rds_instance:
    db_instance_identifier: "{{ rds_instance_identifier }}"
    engine: "{{ rds_engine }}"
    engine_version: "{{ rds_engine_version }}"
    db_instance_class: "{{ rds_instance_class }}"
    allocated_storage: "{{ rds_allocated_storage }}"
    master_username: "{{ rds_master_username }}"
    master_user_password: "{{ rds_master_password }}"
    multi_az: "{{ rds_multi_az }}"
    backup_retention_period: "{{ rds_backup_retention }}"
    publicly_accessible: "{{ rds_publicly_accessible }}"
    vpc_security_group_ids:
      - "{{ db_sg.group_id }}"
    db_subnet_group_name: "{{ project_name }}-rds-subnets"
    tags: "{{ common_tags | combine({'Role': 'database'}) }}"
    state: present
    wait: true
  register: rds_instance

- name: Registrar endpoint do RDS
  ansible.builtin.set_fact:
    rds_endpoint_address: "{{ rds_instance.db_instance['Endpoint']['Address'] }}"
  when: rds_instance is defined and rds_instance.db_instance is defined and 'Endpoint' in rds_instance.db_instance

- name: Expor informações importantes como artefato local
  ansible.builtin.copy:
    dest: "{{ playbook_dir }}/../artifacts/provisioning_output.json"
    content: >-
      {{ {'web_instance': web_instance.instances | default([]) | first | default({}),
          'rds_endpoint': rds_endpoint_address | default('') } | to_nice_json }}
  delegate_to: localhost
  run_once: true
  when: web_instance is defined or rds_instance is defined
